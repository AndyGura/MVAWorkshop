<?xml version="1.0"?>
<components:Editor xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:components="com.andrewgura.ui.components.*">

    <fx:Script><![CDATA[
        import com.andrewgura.controllers.MVAController;
        import com.andrewgura.ui.popup.AppPopups;
        import com.andrewgura.ui.popup.PopupFactory;
        import com.andrewgura.vo.LangVO;
        import com.andrewgura.vo.MVAProjectVO;
        import com.andrewgura.vo.ProjectVO;

        import mx.collections.ArrayCollection;
        import mx.events.CollectionEvent;

        import spark.events.GridItemEditorEvent;

        [Bindable]
        private var controller:MVAController;

        [Bindable]
        public var isLeftPanelVisible:Boolean = true;

        [Bindable]
        public var gridDataProvider:ArrayCollection;

        override public function set project(value:ProjectVO):void {
            super.project = value;
            controller = new MVAController(MVAProjectVO(project));
        }

        private function onGridItemSave(event:GridItemEditorEvent):void {
            project.isChangesSaved = false;
            if (event.column.dataField == "string") {
                var stringId:String = MVAProjectVO(project).entries.getItemAt(event.rowIndex).string;
                stringId = stringId.replace(/[ \.]/gi, '_');
                stringId = stringId.replace(/[^A-Za-z0-9_]/gi, '');
                stringId = stringId.toUpperCase();
                //check duplicate
                stringId = controller.getNewNameForDuplicate(stringId, event.rowIndex);
                MVAProjectVO(project).entries.getItemAt(event.rowIndex).string = stringId;
            }
        }

        private function onAddEntryClick(event:MouseEvent):void {
            controller.addEntry();
        }

        private function onDeleteEntryClick(event:MouseEvent):void {
            PopupFactory.instance.showPopup(AppPopups.CONFIRM_POPUP, 'Are you sure to delete selected entries?', true, null, onOkClick);
            function onOkClick(event:Event):void {
                var entries:Array = [];
                for each (var e:Object in dataGrid.selectedItems) {
                    entries.push(e["string"]);
                }
                controller.removeEntries(entries);
            }
        }

        private function onExportClick(event:MouseEvent):void {
            controller.exportMVA();
        }

        private function updateArrayCollection(...bindings):* {
            MVAProjectVO(project).entries.addEventListener(CollectionEvent.COLLECTION_CHANGE, updateArrayCollection);
            if (!findToggleButton.selected || findTextInput.text.length == 0) {
                gridDataProvider = MVAProjectVO(project).entries;
            } else {
                var fields:Array = ['string'];
                for each (var lang:LangVO in MVAProjectVO(project).langs) {
                    fields.push(lang.code);
                }
                gridDataProvider = new ArrayCollection();
                outerloop:
                        for each (var entry:Object in MVAProjectVO(project).entries) {
                            for each (var field:String in fields) {
                                if (entry[field].toLowerCase().indexOf(findTextInput.text.toLowerCase()) > -1) {
                                    gridDataProvider.addItem(entry);
                                    continue outerloop;
                                }
                            }
                        }
            }
            return null;
        }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <fx:Object>
            {updateArrayCollection(project, MVAProjectVO(project).entries, findToggleButton.selected,
            findTextInput.text)}
        </fx:Object>
    </fx:Declarations>

    <s:VGroup width="100%" height="100%"
              visible="{project}">

        <s:HGroup id="buttonsHGroup" width="100%"
                  verticalAlign="middle">
            <s:Button id="settingsButton"
                      click="{isLeftPanelVisible = !isLeftPanelVisible}"
                      skinClass="com.andrewgura.ui.skins.LeftPanelButtonSkin"/>
            <s:Spacer width="{leftPanel.width - settingsButton.width - buttonsHGroup.gap}"
                      includeInLayout="{isLeftPanelVisible}"/>
            <s:Button label="Add" click="onAddEntryClick(event)"/>
            <s:Button label="Delete" click="onDeleteEntryClick(event)"
                      enabled="{dataGrid.selectedItem}"/>
            <s:ToggleButton id="findToggleButton" label="Find"/>
            <s:Spacer width="100%"/>
            <s:Button label="EXPORT TO PROJECT" click="onExportClick(event)"/>
        </s:HGroup>

        <s:HGroup width="100%" height="100%">

            <components:MVALeftPanel id="leftPanel" height="100%"
                                     includeInLayout="{isLeftPanelVisible}" visible="{isLeftPanelVisible}"
                                     project="{MVAProjectVO(project)}" controller="{controller}"/>

            <s:VGroup width="100%" height="100%"
                      left="{isLeftPanelVisible ? leftPanel.width : 0}">
                <s:HGroup width="100%" verticalAlign="middle"
                          visible="{findToggleButton.selected}" includeInLayout="{findToggleButton.selected}">
                    <s:Label text="Find text:"/>
                    <s:TextInput id="findTextInput" width="100%"/>
                </s:HGroup>
                <s:DataGrid id="dataGrid"
                            width="100%" height="100%"
                            selectionMode="multipleRows"
                            editable="true" sortableColumns="false"
                            dataProvider="{gridDataProvider}"
                            columns="{MVAProjectVO(project).dataGridColumnsProvider}"
                            gridItemEditorSessionSave="onGridItemSave(event)"/>
            </s:VGroup>

        </s:HGroup>

    </s:VGroup>


    <s:Label text="Welcome to MVAWorkshop.{'\n'}Create new project or open an existing one"
             horizontalCenter="0" verticalCenter="0"
             lineBreak="explicit" textAlign="center"
             visible="{!project}"/>

</components:Editor>
